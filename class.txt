Syllabus
********

1) Introduction to TypeScript

2) Variables

3) Functions

4) OOPS

	Classes & Objects

	Encapsulation

	Inheritance

	Polymorphism

	Abstraction

	---
	---
	---

5) Modules in TypeScript


6) Namespaces in TypeScript


7) Generics


8) Enum

Introduction to TypeScript
**************************
	TypeScript is the "Programming" Language

	TypeScript Released by "Microsoft"

	Superset of JavaScript also called as "TypeScript"

	Adv JavaScript and tools also called as "TypeScript"
	
	TypeScript follows the "OOPS".

	TypeScript used to build the React Applications,Angular, NodeJS and VueJS Applications

	extension of TypeScript files is ".ts"

	Browsers "wont" understands the TypeScript.

	Browsers able to understand HTML,CSS,JavaScript.

	So, as a React Developer we must convert TypeScript to Equalent JavaScript

	Conversion of TypeScript to Equalent JavaScript Called as Transpilation

	"tsc" is the tool used to perform "Transpilation"

	tsc stands for "TypeScript Compiler"

	Visual Studio Code IDE is Suggestable IDE to build the both TypeScript and React Applications
	
	VSCode IDE Released By Microsoft and Open Source IDE

	TypeScript installation is "command based Installation"

	TypeScript Installation depending on npm tool

	npm stands for node packaging manager

	npm present in NodeJS

Day-2
*****

Installation of Softwares

1) download and install "NodeJS"

	NodeJS, containes following tools

		=> npm

		=> node

		=> npx

	npm stands for node packaging manager

	npm helps to install the TypeScript

	node tool helps to execute the "JavaScript"
	
	npx stands for "node packaging runner"

	npx helps to create the environment to develop react applications

website : https://nodejs.org/en/download/

file    : node-v16.14.0-x64.msi


2) install TypeScript

	TypeScript installation is command based installation


	> npm install -g typescript

	where -g stands for global installation



3) download and install Visual Studio Code

		VScode is the IDE, provided my microsoft and open source IDE

		VSCode IDE Recomended to develop both TypeScript and React Applications


website : https://code.visualstudio.com/docs/?dv=win

file    : VSCodeUserSetup-x64-1.64.2.exe


Transpilation
*************
	conversion of typescript code to equalent javascript code called as transpilation

	tsc is the tool, used to perform the transpilation

Ex.

		> tsc demo.ts

			o/p

		demo.js

		> node demo.js


Variables
*********
		Variables are used to store the "data"
		Ex.
				string

				number

				boolean

				arrays

				Objects

				---
				---
				---
		we will "declare" the Variables with var/let/const keyword

		let & const keywords introduced in "ES6"

		Variables declaration should contain 

			a-z

			A-Z

			0-9

			$

			and 

			_

		Variables declaration should not start with "digits"

Syntax
******

var/let/const variablename:datatype = value;

Ex.

var msg:string = "welcome to reactjs"
console.log( msg );





1) Introduction to ReactJS

2) Installation of ReactJS

3) First React Application Setup	

4) Directory Structure of React Application

5) Components in ReactJS

	=> Functional Components

	=> Class Level Components

6) Communication Between Components

		Parent to Child

			=> props

			=> state

		Child to Parent

			=> events

7) State Management

	=> Redux
	
	=> Thunk

	=> Saga


8) AJAX Calls /  Asynchronous Calls

		=> axios library

		=> fetch()   Facebook

		=> Rest API'S Calls

				GET

				POST

				PUT

				DELETE

				HEAD

				---
				---
				---

		=> Spring Boot Integration with ReactJS


9) Single Page Applications

		Routing

		Protected Routing


10) Forms with Validations
		
		(Formic & yup)


11) MERN Stack Development

	M - MongoDB

	E - ExpressJS

	R - ReactJS

	N - NodeJS


12) Hooks

	=> Functional Components Hooks

	=> Class Level Components Hooks


13) Authentication

		JWT 

		JSON Web Token Authentication


14) Ecommerce Application


15) Cloud Hosting

		Heroku Deployment

		AWS Deployment


16) Unit test cases


Introduction to ReactJS
***********************

	- ReactJS is a library

	- ReactJS is the JavaScript library

	- React Relaesed by Facebook

	- React Categorized into 3 types

			1) ReactJS
			
			2) React Native

			3) React BootStrap

	- ReactJS used to build the web applications

	- we will build web applications in two ways

			1) JSX

			2) TSX

	- JSX Stands for JavaScript and XML

	- TSX Stands for TypeScript and XML

	- Current version of ReactJS is 18.X

	- React Native used to build the mobile applications

	- React BootStrap used to apply Rich UI to Both web applications and mobile applications

	- Visual Studio Code IDE is Suggestable IDE to build the React Applications

	- Visual Studio Code Released by microsoft and Open Source IDE

	- in general, browsers can't understand XML

	- so, we must convert XML to Equalent JavaScript

	- Babel is the tool, used to convert XML to Equalent JavaScript

	- Babel is the inbuilt tool of ReactJS

	- ReactJS Installation depending on npm tool

	- npm stands for node packaging manager

	- npm present in NodeJS

	- yarn is the tool, provided by facebook

	- yarn tool, used to download the 3rd party libraries

Software Installations
**********************

1) download and install NodeJS

	nodejs containes following tools

		1) npm

		2) node

		3) npx

	npm stands for node packaging manager

	npm helps to install the react,angular,vuejs,.....

	node tool, helps to execute the javascript

	npx stands for node packaging runner

	npx creates the environment to build the react applications


website : https://nodejs.org/en/download/

file    : node-v16.14.1-x64.msi



2) install yarn tool

	yarn tool, provided by facebook

	yarn tool, used to download the "3rd party" libraries

	yarn tool, installation is command based installation

	> npm install -g yarn

	"-g" stands for global installation


3) install create-react-app tool

		create-react-app is the tool

		this tool released by facebook

		this tool, used to create the react applications

		this tool, installation also command based installation

		> npm install -g create-react-app


4) install Visual Studio Code

	website : https://code.visualstudio.com/docs/?dv=win

	file    : VSCodeUserSetup-x64-1.65.2.exe


Create and execute react Application
************************************

1) create the react application with following command

	> npx create-react-app first-app

		where "first-app" is the name of the react application


2) switch to react application

	> cd first-app

3) execute the react application

	> yarn start

		Default port number of React Application is 3000


Directory Structure
*******************
1) node_modules

		it containes libraries

		these libraries helps to execute the react application


2) public/favicon.ico

	this is the Default logo of react application


3) public/index.html

	react library starts the execution from index.html file

	index html file called as main tempalte

	index.html file containes the div whose id as root

	in future we will render component to div


4) public/logo192.png
          logo512.png

	these logos helps to implement the responsive web design


5) public/manifest.json

	used to implement the mobile applications

	helps to develop the progressive web apps

6) public/robots.txt

	used to include the Google SEO Words

	SEO Stands for Search Engine Optimization


7) src

		this folder behaves like source folder

		this folder used to deploy the react components


8) src/App.js
	   App.css
	   App.test.js

		These files are representing the default component files

		unit testing files end with ".test.js" extension

9) src/index.css

	this file used to define the global styles

	these styles applicable to entire react application


10) src/index.js

	this file acting as registration file

	this file handover our component to div whose id as root (present in index.html file)

	we should register our components in index.js file


11) src/logo.svg

	this is the default svg logo of reactjs


12) src/setupTests.js

	this file acting as library file

	this library file helps to write the unit test cases to react applications


13) package.json

	this file containes libraries information

	this file heps to download the 3rd party libraries to develop react applications


Components
**********
	Reusable Portion of Complex UI Called as Component

	We can create more than one component

	we can provide Communication between Components

	React applications are Components based

	Because of Components, Code Reusability incresed in React Application

	Because of Components, Debugging of React Applications are Eazy

	we have two types of Components

	1) functional level components

	2) class level components


steps to create the functional level component
**********************************************

1) create the react application

		> npx create-react-app component-app

				where "component-app" is the name of the react application


2) create the component

		*****************************************
		component-app
		            src
					  First.js

					  index.js

					public
						index.html
		****************************************


state
*****
	state used to represent the "component" data

	"useState()" is the hook, used to represent "state" of a component



NodeJS
******
	NodeJS is the backend technology

	NodeJS applications we will develop with the help of javascript

	NodeJS Supports the libraries/modules.

1) express

	express library used to develop the rest apis

		Ex.
				GET
				POST
				PUT
				DELETE
				--
				--
				--
				--

2) cors

	cors library used to enable the ports Communication

	
	we will download above libraries with "yarn" tool

	above libraries downloads to "node_modules" folder in Current path
	


MERN Stack Development
**********************

M - MongoDB


E - ExpressJS


R - ReactJS


N - NodeJS


MongoDB
*******

	MongoDB is the "NoSQL" database.

	MongoDB database is "JSON" Based database.

	MongoDB database is "light weight" database

	MongoDB database follows "mongodb" protocol

	The default port no of MongoDB database is "27017"

	MongoDB database provides the "cloud" environment in the form of a "MongoDB Atlas" Account

					SQL												NoSQL
	***************************************************************************************************************

	Ex.
			Oracle											MongoDB
			MySQL											CassandraDB
			SQLServer


			tables											collections

			databases										databases

			records											document

			primary key										_id
	*****************************************************************************************************************


Link : https://www.mongodb.com/cloud/atlas/register1


database name : 07reactjs

table         : login_details

url : mongodb+srv://admin:admin@07reactjs.i39e5.mongodb.net/07reactjs?retryWrites=true&w=majority



NodeJS
******
	- NodeJS is the backend technology

	- NodeJS used to develop the "server side" applications

	- we will develop NodeJS Applications with the help of "JavaScript".

	- NodeJS Supports the libraries

libraries
*********

1) mongodb

	mongodb library used to connect to "mongodb" database


2) express

	express library used to develop the "rest api's"

	Ex.
			GET
			POST
			PUT
			DELETE
			---
			---
			---


3) cors

	cors library used to enable the Communication between ports


we will download above libraries with the help of yarn tool

1) create the backend directory

	Ex.
		backend

2) switch to backend directory

	> cd backend


3) download libraries

		yarn add express mongodb cors

4) implement the server

	server.js



Cloud Deployment
****************
1) install aws cli tool

	aws cli tool, used to move our application to aws server

	website : https://aws.amazon.com/cli/

	file    : AWSCLIV2.msi


2) prepare production build

		> npm run build

	if production build success, automatically "build" folder is ready


3) push build folder files to s3 bucket

		static website Hosting

		bucket policies


4) create the security keys to our application

		IAM

5) modify package.json file

	"deploy": "aws s3 cp --recursive ./build s3://frontproject"

6) run the following commands

		> aws configure

		> npm run build

		> npm run deploy



Unit Test Cases  (JEST)

Saga Middleware

Life Cycle Hooks Related Class Level Coponents














































































































































































































































































































































































































































































































































































